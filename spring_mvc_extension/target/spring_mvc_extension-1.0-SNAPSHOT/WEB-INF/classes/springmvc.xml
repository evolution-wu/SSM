<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!-- 自动扫描包控制层组件 -->
    <context:component-scan base-package="com.atiguigu"></context:component-scan>
    <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--/WEB-INF/templates/index.html-->
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <!--配置默认的servlert处理静态资源
    当前工程的web.xml配置的前端控制器DispatcherServlet的url-patter是/
    而tomcate的web.xml,配置的也是/
    此时，浏览器发送的请求会优先被DispatcherServlet进行处理，
    否则给配置了<mvc:default-servlet-handler />和<mvc:annotation-driven/>后，
    的所有静态资源给tomcate中的defaulter处理-->
    <mvc:default-servlet-handler />

    <!--配置视图控制器-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--配置mvc注解驱动-->
    <mvc:annotation-driven/>
    <!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--<property name="defaultEncoding" value="UTF-8"></property>-->
    </bean>

    <bean  id="firstInterceptor" class="com.atiguigu.interceptor.FirstInterceptor"></bean>


    <!--<mvc:interceptors>
       <bean class="com.atiguigu.interceptor.FirstInterceptor"></bean>-->
        <!--<ref bean="firstInterceptor" />-->
        <!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 -->
        <!--<mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/abc"/>
            <ref bean="firstInterceptor"/>
        </mvc:interceptor>
        -->
        <!--<ref bean="firstInterceptor"/>
        <ref bean="secondInterceptor"/>-->

        <!--
    以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，
    通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求
    /**表示所有请求
     -->
   <!-- </mvc:interceptors>-->
   <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>

               properties的键表示处理器方法执行过程中出现的异常
               properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面

                <prop key="ava.lang.ArithmeticException">error</prop>
            </props>
        </property>
        <property name="exceptionAttribute" value="ex"></property>
    </bean>-->

</beans>